# vim: sw=2 ai ts=2 expandtab
# Copyright 2017 Billy Holmes
# This file is part of Satellite-Utils.
# Foobar is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Foobar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
---
- name: clean up unused templates
  hosts: satellites
  vars:
    # configure the next two (2) lines if you need a jump server
    # router_ip: 192.168.26.63
    # ansible_ssh_common_args: "-o 'ProxyCommand=ssh -W %h:%p -q {{ ansible_user }}@{{ router_ip }}'"
    ansible_user: root
    default_org: Demo62
    default_loc: LocalNet
    ok_template_list:
      - 'Discovery Red Hat kexec'
      - 'Kickstart default PXEGrub'
      - 'Kickstart default PXEGrub2'
      - 'Kickstart default PXELinux'
      - 'PXEGrub default local boot'
      - 'PXEGrub global default'
      - 'PXEGrub2 default local boot'
      - 'PXEGrub2 global default'
      - 'pxegrub2_chainload'
      - 'pxegrub2_discovery'
      - 'pxegrub_chainload'
      - 'pxegrub_discovery'
      - 'Satellite Atomic Kickstart Default'
      - 'Satellite Kickstart Default Finish'
      - 'Satellite Kickstart Default User Data'
      - 'Satellite Kickstart Default'
      - 'idm_register'
      - 'kickstart_networking_setup'
      - 'puppet.conf'
      - 'remote_execution_ssh_keys'
      - 'saltstack_minion'
      - 'subscription_manager_registration'
  gather_facts: false

  tasks:
    - block: # always

      - name: "Get list of all templates belonging to Org: {{ default_org }}"
        command: "/usr/bin/hammer --output=json template list --organization='{{ default_org }}'"
        register: org_templates
      - name: "Get list of all templates belonging to Loc: {{ default_loc }}"
        command: "/usr/bin/hammer --output=json template list --location='{{ default_loc }}'"
        register: loc_templates
      - name: Merging lists to dict
        set_fact:
          template_map: "{{ dict( (list1 + list2) | json_query('[*][Id, Name]')) }}"
        vars:
          list1: "{{ org_templates.stdout | from_json | list }}"
          list2: "{{ loc_templates.stdout | from_json | list }}"

      tags: [ always ]

    - block: # remove_templates

      - name: Filtering for items that aren't in the ok_template_list
        set_fact:
          template_remove_map: "{{ [ item.key, item.value ] }}"
        when: item.value not in ok_template_list
        with_dict: "{{ template_map }}"
        register: tmp
      - name: "coerce template_remove_map of results of array of arrays into dict"
        set_fact:
          template_remove_map: "{{ dict( tmp.results | map(attribute='ansible_facts') | select('defined') | map(attribute='template_remove_map') | list) }}"

      - name: Disassociating location from template
        command: "/usr/bin/hammer location remove-config-template --config-template-id {{ item.key }} --name '{{ default_loc }}'"
        with_dict: "{{ template_remove_map }}"
        loop_control:
          label: "{{ item.key }} => {{ item.value }}"
      - name: Disassociating organization from template
        command: "/usr/bin/hammer organization remove-config-template --config-template-id {{ item.key }} --name '{{ default_org }}'"
        with_dict: "{{ template_remove_map }}"
        loop_control:
          label: "{{ item.key }} => {{ item.value }}"

      tags: [ remove_templates ]

    - block: # add_templates

      - name: Get list of all templates
        command: "/usr/bin/hammer --output=json template list"
        register: all_templates
      - name: Turn list to dict
        set_fact:
          template_all_map: "{{ dict( list1 | json_query('[*][Id, Name]')) }}"
        vars:
          list1: "{{ all_templates.stdout | from_json | list }}"

      - name: Filtering for items that need to be enabled for org and loc
        set_fact:
          template_add_map: "{{ [ item.key, item.value ] }}"
        when: item.value in ok_template_list and item.key not in template_map
        with_dict: "{{ template_all_map }}"
        register: tmp
      - name: "coerce template_add_map of results of array of arrays into dict"
        set_fact:
          template_add_map: "{{ dict( tmp.results | map(attribute='ansible_facts') | select('defined') | map(attribute='template_add_map') | list) }}"

      - name: Associating location to template
        command: "/usr/bin/hammer location add-config-template --config-template-id {{ item.key }} --name '{{ default_loc }}'"
        with_dict: "{{ template_add_map }}"
        loop_control:
          label: "{{ item.key }} => {{ item.value }}"
      - name: Associating organization to template
        command: "/usr/bin/hammer organization add-config-template --config-template-id {{ item.key }} --name '{{ default_org }}'"
        with_dict: "{{ template_add_map }}"
        loop_control:
          label: "{{ item.key }} => {{ item.value }}"

      tags: [ add_templates ]
